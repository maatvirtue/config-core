buildscript {
	repositories {
		mavenCentral()
	}

	dependencies {
		classpath 'org.springframework.boot:spring-boot-gradle-plugin:2.0.3.RELEASE'
		classpath 'io.spring.gradle:dependency-management-plugin:1.0.5.RELEASE'
		classpath 'se.transmode.gradle:gradle-docker:1.2'
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'docker'
apply plugin: 'io.spring.dependency-management'
apply plugin: 'maven'

group = 'net.nlacombe'
version = '3.0.1'

sourceCompatibility = 10
targetCompatibility = 10

defaultTasks 'tasks'

dependencyManagement {
	imports {
		mavenBom 'org.springframework.cloud:spring-cloud-config:2.0.0.RELEASE'
	}
}

project.ext.gcloudBuildDir = file('build/gcloud-build/')
project.ext.gcloudProjectId = 'nlacombe-net-prod'

String gcloudDockerImageUrl

dependencies {
	compile 'net.nlacombe:auth-lib:10.0.0'

	compile 'org.springframework.cloud:spring-cloud-config-server'
	compile 'org.springframework.boot:spring-boot-starter-actuator'
	compile 'org.springframework.boot:spring-boot-starter-security'

	runtime 'ch.qos.logback:logback-classic:1.2.3'
}

repositories {
	mavenCentral()
	mavenLocal()
}

wrapper {
	gradleVersion = '4.9'
}

task buildDocker(type: Docker, dependsOn: assemble) {
	tag = "${project.name}"
	dockerfile = file('src/main/docker/Dockerfile')
	doFirst {
		copy {
			from jar
			from file('src/main/docker/')
			into stageDir
		}
	}
}

task buildGcloudDockerImage(type: Exec, dependsOn: assemble) {
	def buildStartTime = new Date()
	gcloudDockerImageUrl = getGcloudDockerImageUrl(buildStartTime)

	workingDir project.gcloudBuildDir
	commandLine 'gcloud', 'builds', 'submit', '--tag', gcloudDockerImageUrl

	doFirst {
		copy {
			from jar
			from file('src/main/docker/')
			into project.gcloudBuildDir
		}
	}
}

task deployToProdGcloud(type: Exec, dependsOn: buildGcloudDockerImage) {
	workingDir project.gcloudBuildDir
	commandLine 'gcloud', 'beta', 'run', 'deploy', "${project.name}",
			'--region', 'us-central1',
			'--memory', '500M',
			'--image', gcloudDockerImageUrl
}

def getGcloudDockerImageUrl(date) {
	def version = project.version + '-' + getDateTimestamp(date)

	return "gcr.io/${project.gcloudProjectId}/${project.name}:${version}"
}

def static getDateTimestamp(date) {
	return date.format('yyyyMMddHHmmss')
}
